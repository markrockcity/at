using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using At.Syntax;
using Microsoft.CodeAnalysis;

namespace At
{
/// <summary>E.g., error or warning</summary>
public class AtDiagnostic 
{
    internal AtDiagnostic(string diagnosticId,AtSyntaxNode node,DiagnosticSeverity severity,string message)
    {
        Id = diagnosticId;
        Location = node?.Position ?? -1;
        Message = message;
        Node = node;
        Severity = severity;
    }

    /// <summary>Gets the diagnostic identifier. For diagnostics generated by the 
    /// compiler, this will be a numeric code with a prefix such as "AT1001".</summary>
    public virtual string Id {get;}
    public virtual int Location {get;}
    public virtual string Message {get;}
    public virtual AtSyntaxNode Node {get;}
    public virtual DiagnosticSeverity Severity {get;}

    public static AtDiagnostic Create(string diagnosticId,AtSyntaxNode node, DiagnosticSeverity severity, string message)
    {
        return new AtDiagnostic(diagnosticId,node,severity,message);
    }
}

public class MsDiagnostic : AtDiagnostic
{
    public MsDiagnostic(Microsoft.CodeAnalysis.Diagnostic d) : base(d.Id,null,_severity(d),d.GetMessage())
    {
        Diagnostic = d;
    }

    private static DiagnosticSeverity _severity(Diagnostic dg)
    {
        return    dg.Severity==Microsoft.CodeAnalysis.DiagnosticSeverity.Error ? DiagnosticSeverity.Error
                : dg.Severity==Microsoft.CodeAnalysis.DiagnosticSeverity.Hidden ? DiagnosticSeverity.Hidden
                : dg.Severity==Microsoft.CodeAnalysis.DiagnosticSeverity.Info ? DiagnosticSeverity.Info
                : DiagnosticSeverity.Warning;
    }

    public Diagnostic Diagnostic {get;}
}

/// <summary>
/// Describes how severe a diagnostic is.
/// </summary>
public enum DiagnosticSeverity
{
    //from Microsoft.CodeAnalysis,  Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0. 

    /// <summary>
    /// Something that is an issue, as determined by some authority,
    /// but is not surfaced through normal means.
    /// There may be different mechanisms that act on these issues.
    /// </summary>
    Hidden = 0,
 
    /// <summary>
    /// Information that does not indicate a problem (i.e. not prescriptive).
    /// </summary>
    Info = 1,
 
    /// <summary>
    /// Something suspicious but allowed.
    /// </summary>
    Warning = 2,
 
    /// <summary>
    /// Something not allowed by the rules of the language or other authority.
    /// </summary>
    Error = 3,
}
}
